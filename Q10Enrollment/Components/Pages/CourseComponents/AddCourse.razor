@page "/course"
@page "/course/{Id:guid?}"

@using Domain.Ports.Services
@using Domain.Dtos
@inject ICourseService CourseService
@inject NavigationManager Navigation

<PageTitle>Course Management</PageTitle>

@if (!string.IsNullOrWhiteSpace(@_errorMessage))
{
    <div class="alert alert-danger d-flex align-items-center" role="alert">
        <svg class="bi flex-shrink-0 me-2" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill" /></svg>
        <div>
            @_errorMessage
        </div>
    </div>
}

<EditForm Model="this" OnValidSubmit="HandleValidSubmit">
    <div class="mb-3">
        <label for="inputName" class="form-label">Name</label>
        <input type="text" class="form-control" id="inputName" aria-describedby="emailHelp" @bind="_courseName" required>
    </div>
    <div class="mb-3">
        <label for="inputCode" class="form-label">Code</label>
        <input type="text" class="form-control" id="inputCode" @bind="_courseCode" required>
    </div>
    <div class="mb-3">
        <label for="inputCredits" class="form-label">Credits</label>
        <input type="number" class="form-control" id="inputCredits" min="1" @bind="_courseCredits" required>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private string _courseName = string.Empty;
    private string _courseCode = string.Empty;
    private int _courseCredits = 1;

    private string _errorMessage = string.Empty;

    [Parameter]
    public Guid? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            try
            {
                var course = await CourseService.GetCourseById(Id.Value);
                _courseName = course.Name;
                _courseCode = course.Code;
                _courseCredits = course.Credits;
            }
            catch (Exception ex)
            {
                _errorMessage = ex.Message;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        var course = new AddCourseDto
        (
            Name: _courseName,
            Code: _courseCode,
            Credits: _courseCredits
        );

        try
        {
            if (Id.HasValue)
            {
                await CourseService.UpdateCourse(Id.Value, course);
            }
            else
            {
                await CourseService.AddCourse(course);
            }
            Navigation.NavigateTo("/courses");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }

    }
}
