@page "/students"
@using Domain.Entities
@using Domain.Ports.Services
@inject IStudentService StudentService
@inject IJSRuntime JS

<PageTitle>Student List</PageTitle>

@if (_students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex flex-column">
        <div class="d-flex justify-content-end mb-2">
            <NavLink class="btn btn-success btn-sm" href="/student">
                <span class="bi bi-patch-plus" data-toggle="tooltip" data-placement="top" title="Agregar"></span>
                Agregar
            </NavLink>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Document</th>
                    <th>Email</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var student in _students)
                {
                    <tr>
                        <td>@student.Name</td>
                        <td>@student.Document</td>
                        <td>@student.Email</td>
                        <td>
                            <div class="d-flex p-2 gap-2">
                                <button class="btn btn-warning" @onclick="() => EditStudent(student.Id)">
                                    <span class="bi bi-pencil" data-toggle="tooltip" data-placement="top" title="Edit"></span>
                                </button>
                                <button type="button" class="btn btn-danger" @onclick="() => ConfirmAndDelete(student.Id)">
                                    <span class="bi bi-trash" data-toggle="tooltip" data-placement="top" title="Delete"></span>
                                </button>
                                <button type="button" class="btn btn-info" @onclick="() => AssignCourse(student.Id)">
                                    <span class="bi bi-journal-bookmark" data-toggle="tooltip" data-placement="top" title="Edit Courses"></span>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    private List<Student>? _students;

    protected override async Task OnInitializedAsync()
    {
        _students = await StudentService.GetStudents();
    }

    private void EditStudent(Guid id)
    {
        Navigation.NavigateTo($"/student/{id}");
    }

    private void AssignCourse(Guid id)
    {
        Navigation.NavigateTo($"/assignment/{id}");
    }

    private async Task ConfirmAndDelete(Guid id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("showConfirm", "Do you want to delete this record?");
        if (confirmed)
        {
            await StudentService.DeleteStudent(id);
            _students = await StudentService.GetStudents();
        }
    }
}
